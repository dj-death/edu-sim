package BizSim_Analyse.Rules;

import System.Collections;
import EduSim.Analyse;
import EduSim.Analyse.DTO;
import EduSim.Analyse.BusinessLayer;

/*
1. rule to fire is if Supply less then demand
2. For traditional the age should be around 2years and price should be least and perf > 5 and size < 15
3. For low find the product with least price, highest age, highest relability
4. For high perf should > 8.9 and size < 11.2 and the age should be around 0
5. For Perf it needs highest reliability perf > 9.4 and size < 16 age < 1
6. For size perf > 4 and size < 10.6 age around 1.5
*/

rule "Supply less then demand"
	salience 10
	no-loop
	when
		Round (roundId : Id)
		RoundProduct (rpId : Id, segId : SegmentTypeId, RoundId == roundId )
		mktData : MarketingData (RoundProductId == rpId)
		rndData : RnDData (RoundProductId == rpId)
		marketDemand : CurrentRoundDemand( qty : Quantity, SegmentTypeId == segId)	
		segmentQuantity : CurrentRoundForecast( SegmentTypeId == segId, Quantity < qty )
	then
		setPurchasedQty( rndData, mktData );
		modify(mktData);
end

rule "Rank different Segments"
	salience 5
	when
		Round (roundId : Id)
		RoundProduct (rpId : Id, segId : SegmentTypeId, RoundId == roundId )
		roundCriteria : RoundCriteria( SegmentTypeId == segId)
		gameCriteria : GameCriteria( SegmentTypeId == segId)
		mktData : MarketingData ( RoundProductId == rpId, SegmentTypeId == segId, Purchased == false)
		rndData : RnDData (RoundProductId == rpId, SegmentTypeId == segId, Purchased == false)
		resultsManager : ResultsManager()
	then
		mktData.Rating = getRating( resultsManager, gameCriteria, roundCriteria, mktData, rndData );
		System.Console.Out.WriteLine( "OverallRating = " + mktData.Rating );
end

function void setPurchasedQty( RnDData rndData, MarketingData mktData) {
	mktData.PurchasedQuantity = mktData.ForecastingQuantity;
	mktData.Purchased = true;
	rndData.Purchased = true;
	System.Console.Out.WriteLine( "PurchasedQuantity : " + mktData.PurchasedQuantity  );
}

function double getRating( ResultsManager resultsManager, GameCriteria gameCriteria, RoundCriteria roundCriteria, MarketingData mktData, RnDData rndData ) {

	double clientAwarenessRating = ( 6.0 - resultsManager.GetCustomerAccessRank(gameCriteria.SegmentTypeId,  mktData))/5.0 * 0.5;
	double ageRating = ( 6.0 - resultsManager.GetAgeRank(gameCriteria.SegmentTypeId,  rndData))/5.0 * gameCriteria.AgeDecision;
	double priceRating = ( 6.0 - resultsManager.GetPriceRank(gameCriteria.SegmentTypeId,  mktData))/5.0 * gameCriteria.PriceDecision;
	double sizeRating = ( 6.0 - resultsManager.GetSizeRank(gameCriteria.SegmentTypeId,  rndData))/5.0 * gameCriteria.PerformanceDecision;
	double performanceRating = ( 6.0 - resultsManager.GetPerformanceRank(gameCriteria.SegmentTypeId,  rndData))/5.0 * gameCriteria.PerformanceDecision;
	double reliabilityRating = ( 6.0 - resultsManager.GetReliabilityRank(gameCriteria.SegmentTypeId,  rndData))/5.0 * gameCriteria.ReliabilityDecision;
	
	double overallRating = clientAwarenessRating + priceRating + ageRating + reliabilityRating + sizeRating + performanceRating;
	
	return overallRating ;
}

